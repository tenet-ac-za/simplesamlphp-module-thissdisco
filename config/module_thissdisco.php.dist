<?php

/*
 * Configuration for the thissdisco module
 */

$config = [
    /*
     * The base template to use. Can be one of "simplesamlphp" (to inherit from base.twig)
     * or "thissio" (to use a template derived from use.thiss.io / SeamlessAccess)
     */
    'basetemplate' => 'simplesamlphp',

    /*
     * Location of a remote metadata query (MDQ) service
     * By default we use our own SimpleSAMLphp metadata via an internal
     * endpoint. You probably only want to changes this in exceptional
     * circumstances (and then you may be better of using SeamlessAccess)
     */
    /*
    'mdq' => [
        'lookup_base' => 'https://md.thiss.io/entities/',
        // the PyFF-compatible search extension. leave unset to use lookup_base
        // 'search' => 'https://md.thiss.io/entities',
    ],
    */

    /*
     * Configuration for the persistence service
     */
    'persistence' => [
        'url' => 'https://use.thiss.io/ps/',
        'context' => 'thiss.io',

        /*
         * Alter Content-Security-Policy to allow external images?
         * Can be false to disable, true to add data: http:,
         * or a string defining the additional CSP to add to image-src
         */
        'csp_images' => true,
    ],

    /*
     * Display a warning when the return parameter is not a known discovery response URL.
     * Should be false (no warning), true (default SA warning), or a URL to direct people to.
     */
    'discovery_response_warning' => true,

    /*
     * Optional URL to a page with further information
     */
    'learn_more_url' => 'https://example.org/learn-more',

    /*
     * Maximum number of results to return in a search (or 0 to disable the limit)
     */
    'search.maxresults' => 500,

    /*
     * The following options all affect caching of the (sha1) hashes. This
     * massively improves performance with large metadata sets, since we do
     * not need to search the whole set every time we look up a single entity.
     *
     * 'cachetype' is one of the cache types supported by Symfony. Can be one
     *             one of {filesystem, phpfiles, memcache, pdo, redis, or none}
     *             Will default to phpfiles or filesystem.
     *
     * 'cachedir'  means different things depending on driver. For filesystem
     *             based drivers, it does what you think. For database type
     *             drivers {redis, memcache, pdo} it is instead a DSN string.
     *             If not set, will default to the cachdir setting in config.php.
     *
     * 'cachelength' sets the default maximum time (in seconds) an entry lives
     *             in the cache. Setting this to 0 means "keep for as long as
     *             possible", which depends on backend. Defaults to 0, which
     *             is sensible for the entityID <-> hash cache.
     *
     * 'cachelength.negative' is the maximum length of time (in seconds) a
     *             non-existant entityID or hash will be remebered for. This
     *             avoids searching metadata again for an entity that will never
     *             be found, but means changes aren't picked up.
     *             Defaults to 3600 seconds which is a good compromise.
     *
     * 'crontags'  a list of cron tags when we should try to warm up the
     *             transformed identifier cache.
     */
    'cachetype' => 'phpfiles',
    //'cachedir' => '/path/to/cache/dir',
    //'cachedir' => 'redis://localhost',
    'cachelength' => 0, // forever
    'cachelength.negative' => 3600,
    'crontags' => ['daily'],

    /*
     * The name of an entity selection profile ("trust profile") to use.
     * Setting this overrides any profile set on the disco URL. Note that
     * the profile itself needs to be defined in the SP metadata.
     */
    //'trustProfile' => 'sirtfi',

    /*
     * Entity selection profile ("trust profile") descriptions to include
     * in all SP metadata. This should be a PHP representation of the JSON
     * that would normally be encoded in metadata (use json_encode() if you
     * want to use the JSON form). Matching profiles declared in SP metadata
     * take precidence over globally specified ones.
     *
     * See https://refeds.org/entity-selection-profile and
     * https://seamlessaccess.atlassian.net/wiki/spaces/DOCUMENTAT/pages/1397686273/Filtering+search+results+-+indicating+which+IdP+s+are+supported
     * for info on defining trust profiles.
     */
    'entity_selection_profiles' => [
        'sirtfi' => [
            'entities' => [
                [
                    'include' => true,
                    'match' => 'assurance_certification',
                    'select' => 'https://refeds.org/sirtfi',
                ],
            ],
            'strict' => true,
        ],
    ],
];
